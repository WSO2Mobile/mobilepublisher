<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET  api/asset/{type} 	       	  : Provides the Rxt template
 GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
 POST api/asset/{type}             : Creates a new asset of the given type
 PUT  api/asset/{type}/{id}	  : Updates an asset with the given type and id
 DELETE asset/{type}/{id} 	  : Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */


var config = require('/config/publisher.json');
var mam_config = require('/config/mam_config.json');
var caramel = require('caramel');

var router = require('/modules/router-g.js').router();
var routeManager = new router.Router();

var makeid= function()
{
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
var getExtension = function(file){
	var path = file.getName();
	var index = path.lastIndexOf('.');
    var ext = index < path.length ? path.substring(index + 1) : '';
	return ext;
}
var getFileOnly = function(file){
	var path = file.getName();
	var index = path.lastIndexOf('.');
    var name = index < path.length ? path.substring(0,index) : '';
	return name;
}
var saveFile = function(file){
	if(file!=undefined){
		var file_n= file.getName()
		if(file_n==""){
			return "";
		}
		var uid= makeid();
		var file_name = mam_config.filePreciseLocation+uid+file_n;
		file.saveAs(file_name);
		return "/publisher/"+file_name;
	}
	return "";
}


routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}', function (context) {

    var shortName = (context.params.type) || '';

    var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
        return (template.shortName == shortName) ? true : false;
    });

    if (!rxtTemplate) {
        log.debug('The asset type: ' + shortName + ' could not be found');
        response.sendError(404, 'Asset type not found.'); //TODO: Replace
    }
    else {
        var model = modelManager.getModel(shortName);
        //Obtain the username from the session and populate the provider field

        var username=require('/modules/user.js').current(session).username;//.get('LOGGED_IN_USER');
        model.set('overview.provider',username);
        var output=model.export('form');

        print(output);
    }
});

routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {

    var shortName = context.params.type;

    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    //If the id is not found it will throw a conversion exception
    try {

        var artifact = artifactManager.get(id);

        //Perform some filerting logic
        artifact=filterManager.filter(artifact);

        if(!artifact){
            response.sendError(401,'You do not have viewing rights for this asset');
            return;
        }

        var model = modelManager.getModel(shortName);

        //Customize the resource for the current app
        dataInjector.inject(artifact,DataInjectorModes.DISPLAY);

        model.import('asset', artifact);


        var result = model.export('form');

        print(result);
    } catch (e) {

        log.debug('The asset type: ' + shortName + ' with id: ' + id + ' could not be found.The following exception was thrown: ' + e);
        response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check the server logs.');
    }

});

routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}', function (context) {
    var shortName = context.params.type;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    //Check if the type is valid
    try {

        var model=modelManager.getModel(shortName);

        //assigning default thumbnail and banner if not provided.
        if(context.post['images_thumbnail'] == '') {
            context.post['images_thumbnail'] = '/publisher/config/defaults/img/thumbnail.jpg';
        }
        if(context.post['images_banner'] == '') {
            context.post['images_banner'] = '/publisher/config/defaults/img/banner.jpg';
        }

		if(shortName !="mobileapp"){
			model.import('form.importer',context.post);
		}
		
		if(shortName =="mobileapp"){
			var username=require('/modules/user.js').current(session).username;
			var ctx = context.post;
			log.info(ctx);
			var files = request.getAllFiles();
			var banner = files['bannerFile'];
		 	banner = saveFile(banner);

			var icon = files['iconFile'];
			icon = saveFile(icon);

			var screenshot1 = files['screenshot1File'];
			screenshot1 = saveFile(screenshot1);

			var screenshot2 = files['screenshot2File'];
			screenshot2 = saveFile(screenshot2);

			var screenshot3 = files['screenshot3File'];
			screenshot3 = saveFile(screenshot3);
			
			var screenshots = screenshot1+","+screenshot2+","+screenshot3;
			var meta = ctx['appmeta'];
			log.info(stringify(meta));
			if(ctx.markettype!='Market' && meta == undefined || meta==""){
				log.debug("Application meta data was not found");
		        response.sendError(500, 'Application meta data was not found');
				return;
			}
			meta = parse(unescape(meta));
			model.set('overview.bundleVersion',meta.version);
			model.set('overview.packageName',meta.package);
			model.set('overview.url',meta.path);
			model.set('overview.name',ctx.name);
			model.set('overview.platform',ctx.platform );
			model.set('overview.version',ctx.version);
			model.set('overview.provider', username);
			model.set('overview.description',ctx.description);
			model.set('overview.type',ctx.markettype);
			model.set('overview.recentChanges',ctx.recentChanges);
			model.set('images.thumbnail',icon);
			model.set('images.banner',banner);
			model.set('images.screenshots',screenshots);
			
		}


        //var assetModel = getModel(context.post);

        model.save();

        //var createdAsset = artifactManager.add(assetModel);

        //Get the model id
        var idField = model.get('*.id');

        if (idField) {
            print({ok: 'true', message: 'Asset created.', id: idField.value});
        }
        else {
            log.debug('An asset of type: ' + shortName + ' could not be created.Probably a fault with publisher logic!');
        }

    }
    catch (e) {
        log.debug('An asset of type: ' + shortName + ' could not be created.The following exception was thrown: ' + e);
        response.sendError(500, 'An asset of type: ' + shortName + ' could not be created.Please check the server logs.');
    }

});

routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;
    var artifactManager = rxtManager.getArtifactManager(shortName);
    log.info('CONTEXT: '+stringify(context.content));
    try {
        var modelA = modelManager.getModel(shortName);
        var modelB = modelManager.getModel(shortName);

        log.debug('POST:' + stringify(context.content));

        modelA.import('form.importer', context.content);

        modelA.set('*.id', id);

        //Get the original artifact
        var originalArtifact = artifactManager.get(id);

        log.info('about to import data from originalArtifact');
        modelB.import('asset', originalArtifact);

        //Checks whether two models are equal
        var reqProps=['overview.name', 'overview.provider', 'overview.version']

        var isEqual = modelManager.assertEqual(modelA, modelB,reqProps);

        //If they are not equal,abort the operation
        if (!isEqual) {
            log.info('trying to get fields which are different');
            var diff=modelManager.diff(modelA,modelB,reqProps);
            response.sendError(406, 'The name,provider and version of an asset cannot be changed.The following fields'
            +' were modified: '+diff);
            return;
        }

        var artifact = modelA.export('asset.exporter');
        artifactManager.update(artifact);
        var msg={};
        msg['ok']=true;
        msg['message']='asset updated';
        print(msg);

    } catch (e) {
        log.debug('The asset ' + id + ' could not be updated.The following exception was thrown: ' + e);
        response.sendError(404, 'The asset ' + id + ' could not be updated.Please check the server logs.');
    }
    /*var shortName=context.params.type;
     var id=context.params.id;
     var attribute=context.params.attr;
     var attributeValue=context.params.value;
     var artifactManager=rxtManager.getArtifactManager(shortName);

     //Obtain the artifact
     try{
     var result=artifactManager.update({
     id:id,
     attributes: {
     attribute:attributeValue,
     overview_type:'default'
     }
     });
     print(result);

     }catch(e){
     print('unable to update artifact with id'+e);
     }*/
});

routeManager.register('DELETE', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
        artifactManager.remove(id);
        print({ok: 'true', message: 'Asset deleted'});
    } catch (e) {
        log.debug('Asset ' + id + 'could not be removed.An exception was thrown: ' + e);
        response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
    }


});


var securityModule=require('/modules/security/security.manager.js').securityManagementModule();

var sm=securityModule.cached();

//This will short circuit the handling of the requests
var passed=sm.check(function(){
    response.sendError(401);

});

//Stop servicing the request if the check failed
if(passed){

    var user=require('/modules/user.js');
    var publisher = require('/modules/publisher.js').publisher(request, session);


//var routeManager=application.get(config.app.ROUTE_MANAGER);
    var rxtManager = publisher.rxtManager;
    var modelManager = publisher.modelManager;
    var dataInjector=publisher.dataInjector;
    var DataInjectorModes=publisher.DataInjectorModes;
    var filterManager=publisher.filterManager;
    var log=new Log();



    routeManager.handle(request, response);
}

%>
