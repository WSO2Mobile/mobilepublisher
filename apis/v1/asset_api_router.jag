<%

/*
 Description: Provides CRUD support for assets
 Note: type: shortName in the Rxt templates
 GET  api/asset/{type} 	       	  : Provides the Rxt template
 GET  api/asset/{type}/{id}        : Provides artifact details on the provided type
 POST api/asset/{type}             : Creates a new asset of the given type
 PUT  api/asset/{type}/{id}	  : Updates an asset with the given type and id
 DELETE asset/{type}/{id} 	  : Deletes an asset with the provided type and id
 Filename:asset.js
 Created Date: 29/7/2013
 */


var config = require('/config/publisher.json');
var caramel = require('caramel');

var router = require('/modules/router-g.js').router();
var routeManager = new router.Router();
var user=require('/modules/user.js');


//var routeManager=application.get(config.app.ROUTE_MANAGER);
var rxtManager = application.get(config.app.RXT_MANAGER);
var modelManager = application.get(config.app.MODEL_MANAGER);
var log=new Log();
routeManager.register('GET', 'publisher', '/publisher/api/asdfds', function (context) {	
	var files = request.getAllFiles();
	var names = [];
	for(var name in files) {
		var file = files[name];
		var fileName = file.getName();
		//Assuming that the extension is of 3 letters
		var fileDistinctName= fileName.substring(0, fileName.length-4);
		//Initial file saving
		var fileID=makeid();
		var path ="/uploads/"+fileID+fileName;
		file.saveAs(path);
		log.info(path); 
		var index = fileName.lastIndexOf('.'); 
	    var ext = index < fileName.length ? fileName.substring(index + 1) : '';
	
	    //Only for IPA files
		if(ext=="ipa"){
			//Save the zip file
			var zipLocation = "/uploads/"+makeid()+fileName;
			file.saveAs(zipLocation+".zip");
			//Read the mobileconfig file
			Packages.java.lang.Thread.sleep(10000);
			log.info(zipLocation+"/Payload/"+fileDistinctName+".app/embedded.mobileprovision");
		 			var mobileConfig = new File(zipLocation+"/Payload/"+fileDistinctName+".app/embedded.mobileprovision");
			mobileConfig.open("r");
			var text = mobileConfig.readAll();
			mobileConfig.close();
			//Find the xml part in the file
			var begining = text.indexOf('<plist version="1.0">');
			var end = text.indexOf("</plist>");
			text = text.substring(begining, end);
			log.info(text+"</plist>");
			var data = new XML(text+"</plist>");
			//log.info(result);
			var iosManifest = mvc.compileTemplate("/apis/ios_profile.hbs", {url:dataconf.mam.server+fileID+fileName, bundleid: "com.wso2mobile.phonebook.Phonebook", appname:"WSO2Phone App"});
			var plistName = "/uploads/"+makeid()+file.getName().substr(ext)[0]+".plist";
			var plist = new File(plistName);
			plist.open("w");
			plist.write(iosManifest);
			plist.close();
			names.push("/publisher"+plistName);
			continue;
		}
	    names.push("/publisher"+path);
	}
	print(names);
});
routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}', function (context) {

    var shortName = (context.params.type) || '';

    var rxtTemplate = rxtManager.findAssetTemplate(function (template) {
        return (template.shortName == shortName) ? true : false;
    });

    if (!rxtTemplate) {
        log.debug('The asset type: '+shortName+' could not be found');
        response.sendError(404, 'Asset type not found.'); //TODO: Replace
    }
    else {
        var model=modelManager.getModel(shortName);
        var output=model.export('form');
        print(output);
    }
});

routeManager.register('GET', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {

    var shortName = context.params.type;

    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    //If the id is not found it will throw a conversion exception
    try {

        var artifact = artifactManager.get(id);

        var model=modelManager.getModel(shortName);

        model.import('asset',artifact);

        var result=model.export('form');

        print(result);
    } catch (e) {

        log.debug('The asset type: '+shortName+' with id: '+id+' could not be found.The following exception was thrown: '+e);
        response.sendError(404, 'Asset with id ' + id + ' could not be found.Please check the server logs.');
    }

});

routeManager.register('POST', 'publisher', '/publisher/api/asset/{type}', function (context) {
    var shortName = context.params.type;
    var artifactManager = rxtManager.getArtifactManager(shortName);

    //Check if the type is valid
    try {

        var model=modelManager.getModel(shortName);
        model.import('form.importer',context.post);

//		model.put('overview.package',);

        //var assetModel = getModel(context.post);

        model.save();

        //var createdAsset = artifactManager.add(assetModel);

        //Get the model id
        var idField=model.get('*.id');

        if(idField){
            print({ok: 'true', message: 'Asset created.', id:idField.value});
        }
        else{
            log.debug('An asset of type: '+shortNa,e+' could not be created.Probably a fault with publisher logic!');
        }

    }
    catch (e) {
        log.debug('An asset of type: '+shortNa,e+' could not be created.The following exception was thrown: '+e);
        response.sendError(500, 'An asset of type: '+shortNa,e+' could not be created.Please check the server logs.');
    }

});

routeManager.register('PUT', 'publisher', '/publisher/api/asset/{type}/{id}/{attr}/{value}', function (context) {
    /*var shortName=context.params.type;
     var id=context.params.id;
     var attribute=context.params.attr;
     var attributeValue=context.params.value;
     var artifactManager=rxtManager.getArtifactManager(shortName);

     //Obtain the artifact
     try{
     var result=artifactManager.update({
     id:id,
     attributes: {
     attribute:attributeValue,
     overview_type:'default'
     }
     });
     print(result);

     }catch(e){
     print('unable to update artifact with id'+e);
     }*/
});

routeManager.register('DELETE', 'publisher', '/publisher/api/asset/{type}/{id}', function (context) {
    var shortName = context.params.type;
    var id = context.params.id;

    var artifactManager = rxtManager.getArtifactManager(shortName);

    try {
        artifactManager.remove(id);
        print({ok: 'true', message: 'Asset deleted'});
    } catch (e) {
        log.debug('Asset '+id+'could not be removed.An exception was thrown: '+e);
        response.sendError(404, 'Asset with id: ' + id + ' could not be removed.');
    }


});

routeManager.handle(request, response);


%>
