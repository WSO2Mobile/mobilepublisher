<%
(function(){
	var mam_config = require('/config/mam-config.json');
	var log=new Log();
	var makeid= function()
	{
	    var text = "";
	    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	    for( var i=0; i < 5; i++ )
	        text += possible.charAt(Math.floor(Math.random() * possible.length));

	    return text;
	}
	var getExtension = function(file){
		var path = file.getName();
		var index = path.lastIndexOf('.');
	    var ext = index < path.length ? path.substring(index + 1) : '';
		return ext;
	}
	var getFileOnly = function(file){
		var path = file.getName();
		var index = path.lastIndexOf('.');
	    var name = index < path.length ? path.substring(0,index) : '';
		return name;
	}
	var saveFile = function(file){
		if(file!=undefined){
			var file_n= file.getName()
			if(file_n==""){
				return "";
			}
			var uid= makeid();
			var file_name = mam_config.filePreciseLocation+uid+file_n;
			file.saveAs(file_name);
			return file_name;
		}
		return "";
	}
	function mergeRecursive(obj1, obj2) {
	    for (var p in obj2) {
	        try {
	            // Property in destination object set; update its value.
	            if (obj2[p].constructor == Object) {
	                obj1[p] = MergeRecursive(obj1[p], obj2[p]);
	            } else {
	                obj1[p] = obj2[p];
	            }
	        } catch (e) {
	            // Property in destination object not set; create it and set its value.
	            obj1[p] = obj2[p];
	        }
	    }
	    return obj1;
	}
	var file = request.getAllFiles().file;
	var meta = {};
	if(file==undefined){
		//return error
		response.sendError(500);
	}else{
		meta.path = saveFile(file);
		var ext = getExtension(file);
		if(ext=="ipa" || ext =="apk"){
			var zipFileReading = new Packages.com.dchan.research.zipfile.ZipFileReading();
			var path = process.getEnv("PWD")+"/repository/deployment/server/jaggeryapps/publisher"+meta.path;
			try{
				if(ext=="ipa"){
					var d = zipFileReading.readiOSManifestFile(path, getFileOnly(file));
					log.info(d);
					var information = JSON.parse(d);
					mergeRecursive(meta,information);
				}else if(ext=="apk"){
					var d = zipFileReading.readAndroidManifestFile(path);
					log.info(d);
					var information = JSON.parse(d);
					mergeRecursive(meta,information);
				}
			}catch(e){
				log.info(e);
				log.debug("Uploaded file is corrupted");
		        response.sendError(500, 'Application meta data was not found');
			}
			log.info("Successfully discovered");
			print(meta);
		}else{
			log.info("Uploaded file is not an archive");
	        response.sendError(500, 'Invalid Filetype');
			return;
		}	
	}
}());
%>